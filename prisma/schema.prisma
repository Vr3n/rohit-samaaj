// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//     provider = "prisma-client-js"
//     previewFeatures = ["jsonProtocol"]
// }
generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model SamaajMemberMaster {
    id String @id @default(cuid())
    firstName String
    lastName String
    fatherName String
    motherName String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    aadharNumber SamaajMemberAadharMaster?
    mobileNumbers SamaajMemberMobileNumberMaster[]
    emailAddress SamaajMemberEmailAddressMaster[]
    addresses SamaajMemberAddressMaster[]
    educationalQualifications SamaajMemberEducationalQualificationMaster[]
}

model SamaajMemberAadharMaster {
    id String @id @default(cuid())
    aadharNumber String @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    samaajMemberId String @unique
    samaajMember SamaajMemberMaster @relation(fields: [samaajMemberId], references: [id], onDelete: Cascade)

    @@unique([aadharNumber, samaajMemberId])
}

model SamaajMemberMobileNumberMaster {
    id String @id @default(cuid())
    mobileNumber String @unique
    isWhatsapp Boolean
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    samaajMemberId String
    samaajMember SamaajMemberMaster @relation(fields: [samaajMemberId], references: [id], onDelete: Cascade)
}

model SamaajMemberEmailAddressMaster {
    id String @id @default(cuid())
    emailAddress String @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    samaajMemberId String
    samaajMember SamaajMemberMaster @relation(fields: [samaajMemberId], references: [id], onDelete: Cascade)
}

model SamaajMemberAddressMaster {
    id String @id @default(cuid())
    flatNoBuildingName String
    landMark String
    area String
    state String
    district String
    taluka String
    city String
    pincode String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    samaajMemberId String
    samaajMember SamaajMemberMaster @relation(fields: [samaajMemberId], references: [id], onDelete: Cascade)
}

model SamaajMemberEducationalQualificationMaster {
    id String @id @default(cuid())
    qualification String
    courseName String
    qualificationYear DateTime @db.Date
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    samaajMemberId String
    samaajMember SamaajMemberMaster @relation(fields: [samaajMemberId], references: [id], onDelete: Cascade)
}

